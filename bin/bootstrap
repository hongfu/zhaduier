#!/usr/bin/env node
/*
 * @Author: hongfu
 * @Date: 2022-01-23 10:03:25
 * @LastEditors: hongfu
 * @LastEditTime: 2022-02-18 16:13:03
 * @Description: 服务端主框架入口
 */

//将框架默认配置以全局环境变量导入
const ENV = require('../.env');
process.env = ENV;

const debug = require('debug')(process.env.ENV_MODE + ':Bootstrap')

const U = require('../bootstrap/utils')

let port = null

/**
 * @description: 启动http服务
 * @param {*} app
 * @param {*} options
 * @return {*}
 */
const start_http_service = (app,config) => {
  app.serv_name = config.serv_name
  app.listen(normalizePort(config.serv_port), config.serv_host);
  app.on('error', onError);
  app.on('listening', onListening);
}

/*
*需要启动的服务列表
*/
const services_list = require('../applications/servicesList');
//服务加载
for (let i = 0; i < services_list.length; i++) {
  let serv = services_list[i];
  serv.config.serv_type == 'http' && start_http_service(serv.app,serv.config);
}

//框架异常捕获
process.on('uncaughtException', (err) => {
  debug('框架启动异常：'+U.errorParse(err))
  process.exit(1)
})

process.on('unhandledRejection', (err) => {
  debug('框架捕获异常:'+U.errorParse(err))
  process.exit(1)
})


/**
 * @description: 读取设定端口字符串处理
 * @param {*}
 * @return {*}
 */
function normalizePort(val) {
  port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * @description: 服务启动出错的捕获和提示
 * @param {*}
 * @return {*}
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? '管道 ' + port
    : '端口 ' + port;


  switch (error.code) {
    case 'EACCES':
      debug(bind + '权限不足');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(bind + '被占用');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * @description: 访问监听调试
 * @param {*}
 * @return {*}
 */
function onListening() {
  let addr = this.address();
  let serv_name = this.serv_name;
  let bind = typeof addr === 'string'
    ? '管道 ' + addr
    : '端口 http://' + addr.address + ':' +addr.port;
  debug(serv_name + '服务成功加载至' + bind);
}
